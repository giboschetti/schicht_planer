' === Configuration ===
Const SUPABASE_URL As String = "https://pswwltjjkasoyqggjphw.supabase.co"
Const SUPABASE_API_KEY As String = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBzd3dsdGpqa2Fzb3lxZ2dqcGh3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQzNjM5MTksImV4cCI6MjA1OTkzOTkxOX0.OjXP_GywhwV8ulDclJUTCPdGl2RnrcQ6LagiEmMfADc"
Const SUPABASE_BUCKET As String = "schichtplanung-files"

Function GetTableConfig(sheetName As String) As String
    Select Case LCase(sheetName)
        Case "schichtplanung"
            GetTableConfig = "Schichtplanung"
        Case "personal"
            GetTableConfig = "Personal"
        Case "arbeitsleiter"
            GetTableConfig = "Arbeitsleiter"
        Case "baufuhrer"
            GetTableConfig = "Baufuhrer"
        Case "abschnitte"
            GetTableConfig = "Abschnitte"
        Case "schichtzeiten"
            GetTableConfig = "Schichtzeiten"
        Case Else
            GetTableConfig = ""
    End Select
End Function

Sub SyncAllTables()
    Dim ws As Worksheet
    For Each ws In ThisWorkbook.Worksheets
        Dim tableName As String
        tableName = GetTableConfig(ws.Name)
        If tableName <> "" Then
            ' Special handling for schichtzeiten table
            If LCase(tableName) = "schichtzeiten" Then
                Call SyncSchichtzeiten(ws, tableName)
            Else
                Call SyncTable(ws, tableName)
            End If
        End If
    Next ws
End Sub

Sub SyncTable(ws As Worksheet, supabaseTable As String)
    Dim tbl As ListObject
    On Error Resume Next
    Set tbl = ws.ListObjects(1)
    On Error GoTo 0
    If tbl Is Nothing Then Exit Sub

    ' Add debug output for schichtzeiten table
    If LCase(supabaseTable) = "schichtzeiten" Then
        Debug.Print "Processing schichtzeiten table"
        
        ' Special case: Ensure Excel cells are properly formatted as time
        FormatSchichtzeitenCells ws
    End If

    Dim row As ListRow
    Dim headers() As String
    Dim jsonBody As String
    Dim i As Integer
    Dim http As Object
    Dim isNewRecord As Boolean
    Dim newRecordsMap As Object
    Set newRecordsMap = CreateObject("Scripting.Dictionary")
    Dim rowIndex As Long
    
    ReDim headers(1 To tbl.ListColumns.count)
    For i = 1 To tbl.ListColumns.count
        headers(i) = tbl.ListColumns(i).Name
    Next i

    ' Add debug output for column headers in schichtzeiten
    If LCase(supabaseTable) = "schichtzeiten" Then
        For i = 1 To tbl.ListColumns.count
            Debug.Print "Column " & i & ": " & headers(i)
        Next i
    End If

    jsonBody = "["
    rowIndex = 0
    For Each row In tbl.ListRows
        rowIndex = rowIndex + 1
        If LCase(row.Range.Cells(1, 1).Offset(0, tbl.ListColumns.count - 1).Value) <> "yes" Then
            ' Check if this is a new record (no ID or empty ID)
            isNewRecord = False
            If LCase(headers(1)) = "id" Then
                Dim idValue As String: idValue = Trim(CStr(row.Range.Cells(1, 1).Value))
                isNewRecord = (idValue = "")
                
                ' Store the row index for later ID updates
                If isNewRecord Then
                    newRecordsMap.Add rowIndex, "" ' Value will be updated with UUID later
                End If
            End If
            
            jsonBody = jsonBody & "{"
            For i = 1 To tbl.ListColumns.count
                Dim colName As String: colName = LCase(headers(i))
                Dim cellVal As String
                
                ' Handle potential Null/Empty values
                If IsEmpty(row.Range.Cells(1, i).Value) Or IsNull(row.Range.Cells(1, i).Value) Then
                    cellVal = ""
                Else
                    cellVal = CStr(row.Range.Cells(1, i).Value)
                End If
                
                ' Skip the "uploaded" column
                If colName = "uploaded" Then
                    GoTo NextColumn
                End If
                
                ' Skip empty ID field for new records (let Supabase generate it)
                If colName = "id" And (cellVal = "" Or isNewRecord) Then
                    GoTo NextColumn
                End If
                
                ' Handle arrays (check schema for array columns)
                If IsArrayColumn(colName, supabaseTable) Then
                    If cellVal = "" Then
                        jsonBody = jsonBody & """" & colName & """:[],"
                    ElseIf InStr(cellVal, ",") > 0 Then
                        Dim elements() As String
                        Dim jsonArray As String
                        elements = Split(cellVal, ",")
                        
                        jsonArray = "["
                        Dim j As Integer
                        For j = LBound(elements) To UBound(elements)
                            jsonArray = jsonArray & """" & Trim(elements(j)) & """"
                            If j < UBound(elements) Then jsonArray = jsonArray & ","
                        Next j
                        jsonArray = jsonArray & "]"
                        
                        jsonBody = jsonBody & """" & colName & """:" & jsonArray & ","
                    Else
                        ' Single value array
                        jsonBody = jsonBody & """" & colName & """:[""" & Trim(cellVal) & """],"
                    End If
                ' Handle date fields
                ElseIf colName = "datum_von" Or colName = "datum_bis" Then
                    If cellVal <> "" Then
                        cellVal = Format(row.Range.Cells(1, i).Value, "yyyy-mm-ddThh:nn:ss")
                        jsonBody = jsonBody & """" & colName & """:""" & cellVal & ""","
                    Else
                        jsonBody = jsonBody & """" & colName & """:null,"
                    End If
                ' Handle time fields for schichtzeiten - Major rework
                ElseIf (LCase(supabaseTable) = "schichtzeiten") And (colName = "zeit_von" Or colName = "zeit_bis") Then
                    Dim timeValue As String, rawValue As Variant
                    rawValue = row.Range.Cells(1, i).Value
                    
                    ' Debug info
                    Debug.Print "Processing " & colName & " with value: " & rawValue & " (Type: " & TypeName(rawValue) & ")"
                    
                    ' Convert to proper PostgreSQL time format
                    timeValue = ConvertToPostgreSQLTime(rawValue)
                    Debug.Print "Converted to PostgreSQL time: " & timeValue
                    
                    If timeValue = "" Then
                        jsonBody = jsonBody & """" & colName & """:null,"
                    Else
                        jsonBody = jsonBody & """" & colName & """:""" & timeValue & ""","
                    End If
                ' Handle file upload
                ElseIf colName = "dateien" Then
                    If cellVal <> "" Then
                        Dim publicUrl As String
                        publicUrl = UploadFileToSupabase(cellVal)
                        row.Range.Cells(1, i + 1).Value = publicUrl
                        jsonBody = jsonBody & """dateien_link"":""" & publicUrl & ""","
                    End If
                ' Handle all other text fields
                Else
                    ' Regular text field
                    jsonBody = jsonBody & """" & colName & """:""" & Replace(cellVal, """", "'") & ""","
                End If
NextColumn:
            Next i
            
            ' Remove trailing comma
            If Right(jsonBody, 1) = "," Then jsonBody = Left(jsonBody, Len(jsonBody) - 1)
            jsonBody = jsonBody & "},"
        End If
nextRow:
    Next row

    ' Remove trailing comma from JSON array
    If Right(jsonBody, 1) = "," Then jsonBody = Left(jsonBody, Len(jsonBody) - 1)
    jsonBody = jsonBody & "]"

    If Len(jsonBody) > 2 Then ' Check if we have any data
        Set http = CreateObject("MSXML2.XMLHTTP")
        
        ' For records with IDs, use UPSERT. For new records without IDs, use INSERT
        Dim endpoint As String
        endpoint = SUPABASE_URL & "/rest/v1/" & LCase(supabaseTable)
        
        http.Open "POST", endpoint, False
        http.setRequestHeader "apikey", SUPABASE_API_KEY
        http.setRequestHeader "Authorization", "Bearer " & SUPABASE_API_KEY
        http.setRequestHeader "Content-Type", "application/json"
        http.setRequestHeader "Prefer", "resolution=merge-duplicates,return=representation"
        
        On Error Resume Next
        http.Send jsonBody
        If Err.Number <> 0 Then
            MsgBox "Fehler beim Senden der Daten: " & Err.Description
            Exit Sub
        End If
        On Error GoTo 0

        If http.status = 201 Or http.status = 200 Then
            ' Process the response to get IDs for new records
            Dim responseData As String
            responseData = http.responseText
            
            ' Extract IDs from response if we have new records to update
            If newRecordsMap.count > 0 Then
                Dim uuids() As String
                uuids = ExtractUUIDsFromJson(responseData)
                
                ' Update Excel with new UUIDs
                Dim uuidIndex As Integer
                uuidIndex = 0
                
                ' Loop through all rows
                rowIndex = 0
                For Each row In tbl.ListRows
                    rowIndex = rowIndex + 1
                    ' If this was a new record (in our map)
                    If newRecordsMap.Exists(rowIndex) Then
                        ' Get next UUID
                        If uuidIndex < UBound(uuids) Then
                            uuidIndex = uuidIndex + 1
                            ' Update ID cell with UUID from Supabase
                            row.Range.Cells(1, 1).Value = uuids(uuidIndex)
                        End If
                    End If
                Next row
            End If
            
            ' Mark all as uploaded
            For Each row In tbl.ListRows
                If LCase(row.Range.Cells(1, tbl.ListColumns.count).Value) <> "yes" Then
                    row.Range.Cells(1, tbl.ListColumns.count).Value = "yes"
                    Call LogSyncEvent(supabaseTable, row.Range.Cells(1, 1).Value, "success", "Daten erfolgreich synchronisiert")
                End If
            Next row
            MsgBox "Tabelle " & supabaseTable & " erfolgreich synchronisiert."
        Else
            MsgBox "Fehler beim Hochladen: " & http.status & vbCrLf & http.responseText
            Call LogSyncEvent(supabaseTable, "", "error", "API Fehler", http.responseText)
        End If
    Else
        MsgBox "Keine Daten zum Synchronisieren gefunden."
    End If
End Sub

' Special sync function just for the schichtzeiten table with time handling
Sub SyncSchichtzeiten(ws As Worksheet, supabaseTable As String)
    Dim tbl As ListObject
    On Error Resume Next
    Set tbl = ws.ListObjects(1)
    On Error GoTo 0
    If tbl Is Nothing Then Exit Sub
    
    DebugLog "Starting special sync for Schichtzeiten table"
    
    Dim row As ListRow
    Dim headers() As String
    Dim jsonBody As String
    Dim i As Integer
    Dim http As Object
    Dim isNewRecord As Boolean
    Dim newRecordsMap As Object
    Set newRecordsMap = CreateObject("Scripting.Dictionary")
    Dim rowIndex As Long
    
    ReDim headers(1 To tbl.ListColumns.count)
    For i = 1 To tbl.ListColumns.count
        headers(i) = tbl.ListColumns(i).Name
        DebugLog "Column " & i & ": " & headers(i)
    Next i

    jsonBody = "["
    rowIndex = 0
    For Each row In tbl.ListRows
        rowIndex = rowIndex + 1
        If LCase(row.Range.Cells(1, 1).Offset(0, tbl.ListColumns.count - 1).Value) <> "yes" Then
            ' Check if this is a new record (no ID or empty ID)
            isNewRecord = False
            If LCase(headers(1)) = "id" Then
                Dim idValue As String: idValue = Trim(CStr(row.Range.Cells(1, 1).Value))
                isNewRecord = (idValue = "")
                
                ' Store the row index for later ID updates
                If isNewRecord Then
                    newRecordsMap.Add rowIndex, "" ' Value will be updated with UUID later
                End If
            End If
            
            jsonBody = jsonBody & "{"
            
            ' Log the raw values for this row for debugging
            Dim zeitVonValue As Variant, zeitBisValue As Variant, schichtValue As String
            Dim zeitVonCol As Long, zeitBisCol As Long, schichtCol As Long
            
            ' Find column indexes
            For i = 1 To tbl.ListColumns.count
                If LCase(headers(i)) = "zeit_von" Then
                    zeitVonCol = i
                ElseIf LCase(headers(i)) = "zeit_bis" Then
                    zeitBisCol = i
                ElseIf LCase(headers(i)) = "schicht" Then
                    schichtCol = i
                End If
            Next i
            
            If zeitVonCol > 0 And zeitBisCol > 0 And schichtCol > 0 Then
                zeitVonValue = row.Range.Cells(1, zeitVonCol).Value
                zeitBisValue = row.Range.Cells(1, zeitBisCol).Value
                schichtValue = CStr(row.Range.Cells(1, schichtCol).Value)
                
                DebugLog "Row for " & schichtValue & ": zeit_von=" & TypeName(zeitVonValue) & ":" & zeitVonValue & _
                         ", zeit_bis=" & TypeName(zeitBisValue) & ":" & zeitBisValue
            End If
            
            ' Build JSON for each column
            For i = 1 To tbl.ListColumns.count
                Dim colName As String: colName = LCase(headers(i))
                Dim cellVal As String
                
                ' Handle potential Null/Empty values
                If IsEmpty(row.Range.Cells(1, i).Value) Or IsNull(row.Range.Cells(1, i).Value) Then
                    cellVal = ""
                Else
                    cellVal = CStr(row.Range.Cells(1, i).Value)
                End If
                
                ' Skip the "uploaded" column
                If colName = "uploaded" Then
                    GoTo NextColumn
                End If
                
                ' Skip empty ID field for new records (let Supabase generate it)
                If colName = "id" And (cellVal = "" Or isNewRecord) Then
                    GoTo NextColumn
                End If
                
                ' Special handling for zeit_von and zeit_bis
                If colName = "zeit_von" Or colName = "zeit_bis" Then
                    Dim timeValue As String
                    Dim rawValue As Variant
                    
                    rawValue = row.Range.Cells(1, i).Value
                    
                    ' Direct extraction of hours and minutes for Excel time values
                    If IsDate(rawValue) Then
                        ' Convert to 24-hour time format directly
                        Dim tm As Date
                        tm = rawValue
                        timeValue = Format(Hour(tm), "00") & ":" & Format(Minute(tm), "00") & ":" & Format(Second(tm), "00")
                        DebugLog "Converting date value " & rawValue & " to " & timeValue
                    ElseIf TypeName(rawValue) = "String" And InStr(rawValue, ":") > 0 Then
                        ' Parse string time like "08:00:00" or "18:00"
                        timeValue = FormatExcelTimeString(CStr(rawValue))
                        DebugLog "Converting string value " & rawValue & " to " & timeValue
                    ElseIf IsNumeric(rawValue) Then
                        ' Handle numeric time (might be stored as decimal hours)
                        Dim numHours As Double
                        numHours = CDbl(rawValue)
                        Dim h As Integer, m As Integer
                        
                        ' Excel stores time as a fraction of 24 hours, so we need to multiply by 24
                        numHours = numHours * 24
                        
                        h = Int(numHours)
                        m = Int((numHours - h) * 60)
                        timeValue = Format(h, "00") & ":" & Format(m, "00") & ":00"
                        DebugLog "Converting numeric value " & rawValue & " to " & timeValue & " (day fraction * 24)"
                    Else
                        ' Default
                        timeValue = "00:00:00"
                        DebugLog "Using default time 00:00:00 for " & colName & " value: " & rawValue
                    End If
                    
                    jsonBody = jsonBody & """" & colName & """:""" & timeValue & ""","
                Else
                    ' Regular text field
                    jsonBody = jsonBody & """" & colName & """:""" & Replace(cellVal, """", "'") & ""","
                End If
                
NextColumn:
            Next i
            
            ' Remove trailing comma
            If Right(jsonBody, 1) = "," Then jsonBody = Left(jsonBody, Len(jsonBody) - 1)
            jsonBody = jsonBody & "},"
        End If
nextRow:
    Next row

    ' Remove trailing comma from JSON array
    If Right(jsonBody, 1) = "," Then jsonBody = Left(jsonBody, Len(jsonBody) - 1)
    jsonBody = jsonBody & "]"

    DebugLog "Final JSON: " & jsonBody
    
    If Len(jsonBody) > 2 Then ' Check if we have any data
        Set http = CreateObject("MSXML2.XMLHTTP")
        
        ' For records with IDs, use UPSERT. For new records without IDs, use INSERT
        Dim endpoint As String
        endpoint = SUPABASE_URL & "/rest/v1/" & LCase(supabaseTable)
        
        http.Open "POST", endpoint, False
        http.setRequestHeader "apikey", SUPABASE_API_KEY
        http.setRequestHeader "Authorization", "Bearer " & SUPABASE_API_KEY
        http.setRequestHeader "Content-Type", "application/json"
        http.setRequestHeader "Prefer", "resolution=merge-duplicates,return=representation"
        
        On Error Resume Next
        http.Send jsonBody
        If Err.Number <> 0 Then
            MsgBox "Fehler beim Senden der Daten: " & Err.Description
            Exit Sub
        End If
        On Error GoTo 0

        If http.status = 201 Or http.status = 200 Then
            ' Process the response to get IDs for new records
            Dim responseData As String
            responseData = http.responseText
            
            ' Extract IDs from response if we have new records to update
            If newRecordsMap.count > 0 Then
                Dim uuids() As String
                uuids = ExtractUUIDsFromJson(responseData)
                
                ' Update Excel with new UUIDs
                Dim uuidIndex As Integer
                uuidIndex = 0
                
                ' Loop through all rows
                rowIndex = 0
                For Each row In tbl.ListRows
                    rowIndex = rowIndex + 1
                    ' If this was a new record (in our map)
                    If newRecordsMap.Exists(rowIndex) Then
                        ' Get next UUID
                        If uuidIndex < UBound(uuids) Then
                            uuidIndex = uuidIndex + 1
                            ' Update ID cell with UUID from Supabase
                            row.Range.Cells(1, 1).Value = uuids(uuidIndex)
                        End If
                    End If
                Next row
            End If
            
            ' Mark all as uploaded
            For Each row In tbl.ListRows
                If LCase(row.Range.Cells(1, tbl.ListColumns.count).Value) <> "yes" Then
                    row.Range.Cells(1, tbl.ListColumns.count).Value = "yes"
                    Call LogSyncEvent(supabaseTable, row.Range.Cells(1, 1).Value, "success", "Daten erfolgreich synchronisiert")
                End If
            Next row
            MsgBox "Tabelle " & supabaseTable & " erfolgreich synchronisiert."
        Else
            MsgBox "Fehler beim Hochladen: " & http.status & vbCrLf & http.responseText
            Call LogSyncEvent(supabaseTable, "", "error", "API Fehler", http.responseText)
        End If
    Else
        MsgBox "Keine Daten zum Synchronisieren gefunden."
    End If
End Sub

' Helper function to format time strings consistently
Function FormatExcelTimeString(timeStr As String) As String
    If Trim(timeStr) = "" Then
        FormatExcelTimeString = "00:00:00"
        Exit Function
    End If
    
    Dim parts As Variant
    parts = Split(timeStr, ":")
    
    Dim hours As Integer, minutes As Integer, seconds As Integer
    On Error Resume Next
    hours = CInt(parts(0))
    If UBound(parts) >= 1 Then minutes = CInt(parts(1)) Else minutes = 0
    If UBound(parts) >= 2 Then seconds = CInt(parts(2)) Else seconds = 0
    On Error GoTo 0
    
    ' Handle overflow
    While minutes >= 60
        hours = hours + 1
        minutes = minutes - 60
    Wend
    
    While seconds >= 60
        minutes = minutes + 1
        seconds = seconds - 60
    Wend
    
    ' Ensure hours don't exceed 24
    hours = hours Mod 24
    
    FormatExcelTimeString = Format(hours, "00") & ":" & Format(minutes, "00") & ":" & Format(seconds, "00")
End Function

' Log debugging information
Sub DebugLog(logMessage As String)
    Debug.Print Format(Now(), "hh:mm:ss") & " - " & logMessage
    
    ' Also log to a file for persistent debugging
    Dim logFile As String
    logFile = ThisWorkbook.Path & "\debug_log.txt"
    
    Dim fileNum As Integer
    fileNum = FreeFile
    
    On Error Resume Next
    Open logFile For Append As fileNum
    Print #fileNum, Format(Now(), "yyyy-mm-dd hh:mm:ss") & " - " & logMessage
    Close fileNum
    On Error GoTo 0
End Sub

' Extract UUIDs from Supabase JSON response
Function ExtractUUIDsFromJson(jsonString As String) As String()
    Dim uuids() As String
    Dim matches As Object
    Dim regex As Object
    Dim match As Object
    Dim count As Integer
    
    ' Initialize array
    ReDim uuids(0)
    count = 0
    
    ' Create regex to find UUIDs (pattern: "id":"UUID-PATTERN")
    Set regex = CreateObject("VBScript.RegExp")
    regex.Global = True
    regex.Pattern = """id"":""([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})"""
    
    ' Find all matches
    Set matches = regex.Execute(jsonString)
    
    ' Extract UUIDs from matches
    If matches.count > 0 Then
        ReDim uuids(matches.count)
        For Each match In matches
            count = count + 1
            ' Extract the UUID from the matched string (capture group 1)
            uuids(count) = Mid(match.SubMatches(0), 1)
        Next match
    End If
    
    ExtractUUIDsFromJson = uuids
End Function

' Function to determine if a column should be formatted as an array
Function IsArrayColumn(colName As String, tableName As String) As Boolean
    ' Define array columns based on the Supabase schema
    Dim schichtplanungArrays As Variant
    schichtplanungArrays = Array("baufuhrer", "arbeitsleiter", "baugruppe", "ako", _
                                "sc_1", "siwa_1", "siwa_2", "logistikpersonal", _
                                "maschinisten", "personal_gbm", "gleisbaumaschine", _
                                "bagger", "diverse_maschinen", "subunternehmer")
    
    If LCase(tableName) = "schichtplanung" Then
        Dim i As Integer
        For i = LBound(schichtplanungArrays) To UBound(schichtplanungArrays)
            If colName = schichtplanungArrays(i) Then
                IsArrayColumn = True
                Exit Function
            End If
        Next i
    End If
    
    IsArrayColumn = False
End Function

' Generate a proper UUID string
Function GenerateUUID() As String
    ' Create a type 4 UUID
    Dim Result As String
    Dim i As Integer
    
    ' Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx
    ' where x is any hexadecimal digit and y is one of 8, 9, A, or B
    
    Randomize
    Result = String(36, "0")
    
    ' First group (8 chars)
    For i = 1 To 8
        Mid(Result, i, 1) = Mid("0123456789abcdef", Int(Rnd * 16) + 1, 1)
    Next i
    
    ' Second group (4 chars)
    Mid(Result, 10, 1) = Mid("0123456789abcdef", Int(Rnd * 16) + 1, 1)
    Mid(Result, 11, 1) = Mid("0123456789abcdef", Int(Rnd * 16) + 1, 1)
    Mid(Result, 12, 1) = Mid("0123456789abcdef", Int(Rnd * 16) + 1, 1)
    Mid(Result, 13, 1) = Mid("0123456789abcdef", Int(Rnd * 16) + 1, 1)
    
    ' Third group (4 chars, first digit is 4 for version 4 UUID)
    Mid(Result, 15, 1) = "4"
    Mid(Result, 16, 1) = Mid("0123456789abcdef", Int(Rnd * 16) + 1, 1)
    Mid(Result, 17, 1) = Mid("0123456789abcdef", Int(Rnd * 16) + 1, 1)
    Mid(Result, 18, 1) = Mid("0123456789abcdef", Int(Rnd * 16) + 1, 1)
    
    ' Fourth group (4 chars, first digit is 8, 9, a, or b)
    Mid(Result, 20, 1) = Mid("89ab", Int(Rnd * 4) + 1, 1)
    Mid(Result, 21, 1) = Mid("0123456789abcdef", Int(Rnd * 16) + 1, 1)
    Mid(Result, 22, 1) = Mid("0123456789abcdef", Int(Rnd * 16) + 1, 1)
    Mid(Result, 23, 1) = Mid("0123456789abcdef", Int(Rnd * 16) + 1, 1)
    
    ' Fifth group (12 chars)
    For i = 25 To 36
        Mid(Result, i, 1) = Mid("0123456789abcdef", Int(Rnd * 16) + 1, 1)
    Next i
    
    ' Add hyphens
    Mid(Result, 9, 1) = "-"
    Mid(Result, 14, 1) = "-"
    Mid(Result, 19, 1) = "-"
    Mid(Result, 24, 1) = "-"
    
    GenerateUUID = Result
End Function

Function UploadFileToSupabase(filePath As String) As String
    On Error GoTo errHandler
    If Dir(filePath) = "" Then UploadFileToSupabase = "": Exit Function

    Dim fileStream As Object
    Set fileStream = CreateObject("ADODB.Stream")
    fileStream.Type = 1 ' binary
    fileStream.Open
    fileStream.LoadFromFile filePath

    Dim http As Object
    Set http = CreateObject("WinHttp.WinHttpRequest.5.1")

    Dim fileName As String
    fileName = Mid(filePath, InStrRev(filePath, "\") + 1)

    Dim uploadUrl As String
    uploadUrl = SUPABASE_URL & "/storage/v1/object/" & SUPABASE_BUCKET & "/" & fileName

    http.Open "POST", uploadUrl, False
    http.setRequestHeader "apikey", SUPABASE_API_KEY
    http.setRequestHeader "Authorization", "Bearer " & SUPABASE_API_KEY
    http.setRequestHeader "Content-Type", "application/octet-stream"
    http.Send fileStream.Read

    If http.status = 200 Or http.status = 201 Then
        UploadFileToSupabase = SUPABASE_URL & "/storage/v1/object/public/" & SUPABASE_BUCKET & "/" & fileName
    Else
        UploadFileToSupabase = ""
    End If
    fileStream.Close
    Exit Function
errHandler:
    UploadFileToSupabase = ""
End Function

Sub LogSyncEvent(sheetName As String, rowID As String, status As String, msg As String, Optional details As String = "")
    Dim logWS As Worksheet
    On Error Resume Next
    Set logWS = ThisWorkbook.Sheets("SyncLog")
    If logWS Is Nothing Then
        Set logWS = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.count))
        logWS.Name = "SyncLog"
        logWS.Range("A1:F1").Value = Array("timestamp", "sheet_name", "row_id", "status", "message", "details")
    End If
    On Error GoTo 0

    Dim nextRow As Long
    nextRow = logWS.Cells(logWS.Rows.count, 1).End(xlUp).row + 1
    logWS.Cells(nextRow, 1).Value = Now()
    logWS.Cells(nextRow, 2).Value = sheetName
    logWS.Cells(nextRow, 3).Value = rowID
    logWS.Cells(nextRow, 4).Value = status
    logWS.Cells(nextRow, 5).Value = msg
    logWS.Cells(nextRow, 6).Value = details
End Sub

' Function to specifically format schichtzeiten cells as time
Sub FormatSchichtzeitenCells(ws As Worksheet)
    Dim tbl As ListObject
    On Error Resume Next
    Set tbl = ws.ListObjects(1)
    On Error GoTo 0
    If tbl Is Nothing Then Exit Sub
    
    Dim zeitVonCol As ListColumn, zeitBisCol As ListColumn
    Dim row As ListRow
    
    ' Find the time columns
    On Error Resume Next
    Set zeitVonCol = tbl.ListColumns("zeit_von")
    Set zeitBisCol = tbl.ListColumns("zeit_bis")
    On Error GoTo 0
    
    If zeitVonCol Is Nothing Or zeitBisCol Is Nothing Then Exit Sub
    
    ' Update each cell to ensure it's in proper time format
    For Each row In tbl.ListRows
        ' Handle zeit_von column
        FormatTimeCell row.Range.Cells(1, zeitVonCol.Index)
        
        ' Handle zeit_bis column
        FormatTimeCell row.Range.Cells(1, zeitBisCol.Index)
    Next row
End Sub

Sub FormatTimeCell(cell As Range)
    If IsEmpty(cell.Value) Then Exit Sub
    
    ' Convert to proper time format
    Dim timeValue As String
    Dim hours As Integer, minutes As Integer, seconds As Integer
    
    If IsDate(cell.Value) Then
        ' Already a date/time, just format it
        cell.NumberFormat = "hh:mm:ss"
    ElseIf TypeName(cell.Value) = "String" Then
        ' String - parse and convert to time
        Dim timeStr As String
        timeStr = cell.Value
        
        If InStr(timeStr, ":") > 0 Then
            ' Already has colons - parse parts
            Dim timeParts As Variant
            timeParts = Split(timeStr, ":")
            
            On Error Resume Next
            hours = CInt(timeParts(0))
            If UBound(timeParts) >= 1 Then minutes = CInt(timeParts(1)) Else minutes = 0
            If UBound(timeParts) >= 2 Then seconds = CInt(timeParts(2)) Else seconds = 0
            On Error GoTo 0
            
            ' Create a time value and update cell
            If hours >= 0 And hours < 24 And minutes >= 0 And minutes < 60 Then
                cell.Value = TimeSerial(hours, minutes, seconds)
                cell.NumberFormat = "hh:mm:ss"
            End If
        End If
    End If
End Sub

' Function to convert various time formats to PostgreSQL time string
Function ConvertToPostgreSQLTime(timeInput As Variant) As String
    On Error Resume Next
    
    ' Check for empty values
    If IsEmpty(timeInput) Or IsNull(timeInput) Then
        ConvertToPostgreSQLTime = ""
        Exit Function
    End If
    
    ' Handle actual Excel time values (stored as fractions of a day)
    If IsDate(timeInput) Then
        ' Format directly as HH:MM:SS
        ConvertToPostgreSQLTime = Format(timeInput, "hh:mm:ss")
        Exit Function
    End If
    
    ' Handle string time formats
    Dim timeStr As String
    timeStr = CStr(timeInput)
    
    ' Skip empty strings
    If Trim(timeStr) = "" Then
        ConvertToPostgreSQLTime = ""
        Exit Function
    End If
    
    Dim hours As Integer, minutes As Integer, seconds As Integer
    
    ' Check if format is already HH:MM:SS or HH:MM
    If InStr(timeStr, ":") > 0 Then
        Dim timeParts As Variant
        timeParts = Split(timeStr, ":")
        
        ' Get hours, handling potential errors
        On Error Resume Next
        hours = CInt(timeParts(0))
        If Err.Number <> 0 Then hours = 0
        Err.Clear
        
        ' Get minutes if available
        If UBound(timeParts) >= 1 Then
            minutes = CInt(timeParts(1))
            If Err.Number <> 0 Then minutes = 0
            Err.Clear
        Else
            minutes = 0
        End If
        
        ' Get seconds if available
        If UBound(timeParts) >= 2 Then
            seconds = CInt(timeParts(2))
            If Err.Number <> 0 Then seconds = 0
            Err.Clear
        Else
            seconds = 0
        End If
        
        On Error GoTo 0
        
        ' Handle overflow
        While minutes >= 60
            hours = hours + 1
            minutes = minutes - 60
        Wend
        
        While seconds >= 60
            minutes = minutes + 1
            seconds = seconds - 60
        Wend
        
        ' If hours exceed 24, wrap around (PostgreSQL time is 24-hour based)
        hours = hours Mod 24
    Else
        ' Try to interpret as a number (like "8" for 8:00:00)
        On Error Resume Next
        Dim numValue As Double
        numValue = CDbl(Replace(timeStr, ",", "."))
        
        If Err.Number = 0 Then
            ' Convert to hours, minutes, seconds
            hours = Int(numValue)
            minutes = Int((numValue - hours) * 60)
            seconds = Int((((numValue - hours) * 60) - minutes) * 60)
            
            ' Handle wrapping for 24-hour time
            hours = hours Mod 24
        Else
            ' If all conversion attempts fail, return empty string
            ConvertToPostgreSQLTime = ""
            Exit Function
        End If
        On Error GoTo 0
    End If
    
    ' Format as HH:MM:SS for PostgreSQL
    ConvertToPostgreSQLTime = Format(hours, "00") & ":" & Format(minutes, "00") & ":" & Format(seconds, "00")
End Function








